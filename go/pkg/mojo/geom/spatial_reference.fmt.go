// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package geom

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

var SpatialReferenceNames = map[int32]string{
	0: "unspecified",
	1: "wgs84",
	2: "gcj02",
	3: "bd09",
	4: "cgcs2000",
	5: "sh2000",
}

var SpatialReferenceValues = map[string]SpatialReference{
	"unspecified": SpatialReference_SPATIAL_REFERENCE_UNSPECIFIED,
	"wgs84":       SpatialReference_SPATIAL_REFERENCE_WGS84,
	"gcj02":       SpatialReference_SPATIAL_REFERENCE_GCJ02,
	"bd09":        SpatialReference_SPATIAL_REFERENCE_BD09,
	"cgcs2000":    SpatialReference_SPATIAL_REFERENCE_CGCS2000,
	"sh2000":      SpatialReference_SPATIAL_REFERENCE_SH2000,
}

func (x SpatialReference) Format() string {
	v := int32(x)
	if s, ok := SpatialReferenceNames[v]; ok {
		if v == 0 && "unspecified" == strings.ToLower(s) {
			return ""
		}
		return s
	}
	if v == 0 {
		return ""
	}
	return strconv.Itoa(int(v))
}

func (x SpatialReference) ToString() string {
	return x.Format()
}

func (x *SpatialReference) Parse(value string) error {
	if x != nil && len(value) > 0 {
		if s, ok := SpatialReferenceValues[value]; ok {
			*x = s
		} else {
			v := core.CaseStyler("snake")(value)
			if s, ok = SpatialReferenceValues[v]; ok {
				*x = s
			} else {
				return fmt.Errorf("invalid SpatialReference: %s", value)
			}
		}
	}
	return nil
}

func ParseSpatialReference(value string) (SpatialReference, error) {
	var v SpatialReference
	if err := (&v).Parse(value); err != nil {
		return v, err
	}
	return v, nil
}
