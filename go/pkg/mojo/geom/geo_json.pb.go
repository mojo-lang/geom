// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mojo/geom/geo_json.proto

package geom

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GeoJson struct {
	// Types that are valid to be assigned to GeoJson:
	//	*GeoJson_Point
	//	*GeoJson_MultiPoint
	//	*GeoJson_LineString
	//	*GeoJson_MultiLineString
	//	*GeoJson_Polygon
	//	*GeoJson_MultiPolygon
	//	*GeoJson_GeometryCollection
	//	*GeoJson_Feature
	//	*GeoJson_FeatureCollection
	GeoJson              isGeoJson_GeoJson `protobuf_oneof:"geo_json"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" gorm:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" gorm:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" gorm:"-" xml:"-" bson:"-"`
}

func (m *GeoJson) Reset()         { *m = GeoJson{} }
func (m *GeoJson) String() string { return proto.CompactTextString(m) }
func (*GeoJson) ProtoMessage()    {}
func (*GeoJson) Descriptor() ([]byte, []int) {
	return fileDescriptor_d54cad024c4d1f44, []int{0}
}
func (m *GeoJson) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoJson.Unmarshal(m, b)
}
func (m *GeoJson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoJson.Marshal(b, m, deterministic)
}
func (m *GeoJson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoJson.Merge(m, src)
}
func (m *GeoJson) XXX_Size() int {
	return xxx_messageInfo_GeoJson.Size(m)
}
func (m *GeoJson) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoJson.DiscardUnknown(m)
}

var xxx_messageInfo_GeoJson proto.InternalMessageInfo

type isGeoJson_GeoJson interface {
	isGeoJson_GeoJson()
}

type GeoJson_Point struct {
	Point *Point `protobuf:"bytes,1,opt,name=point,proto3,oneof" json:"point,omitempty"`
}
type GeoJson_MultiPoint struct {
	MultiPoint *MultiPoint `protobuf:"bytes,2,opt,name=multi_point,json=multiPoint,proto3,oneof" json:"multiPoint,omitempty"`
}
type GeoJson_LineString struct {
	LineString *LineString `protobuf:"bytes,3,opt,name=line_string,json=lineString,proto3,oneof" json:"lineString,omitempty"`
}
type GeoJson_MultiLineString struct {
	MultiLineString *MultiLineString `protobuf:"bytes,4,opt,name=multi_line_string,json=multiLineString,proto3,oneof" json:"multiLineString,omitempty"`
}
type GeoJson_Polygon struct {
	Polygon *Polygon `protobuf:"bytes,5,opt,name=polygon,proto3,oneof" json:"polygon,omitempty"`
}
type GeoJson_MultiPolygon struct {
	MultiPolygon *MultiPolygon `protobuf:"bytes,6,opt,name=multi_polygon,json=multiPolygon,proto3,oneof" json:"multiPolygon,omitempty"`
}
type GeoJson_GeometryCollection struct {
	GeometryCollection *GeometryCollection `protobuf:"bytes,7,opt,name=geometry_collection,json=geometryCollection,proto3,oneof" json:"geometryCollection,omitempty"`
}
type GeoJson_Feature struct {
	Feature *Feature `protobuf:"bytes,10,opt,name=feature,proto3,oneof" json:"feature,omitempty"`
}
type GeoJson_FeatureCollection struct {
	FeatureCollection *FeatureCollection `protobuf:"bytes,11,opt,name=feature_collection,json=featureCollection,proto3,oneof" json:"featureCollection,omitempty"`
}

func (*GeoJson_Point) isGeoJson_GeoJson()              {}
func (*GeoJson_MultiPoint) isGeoJson_GeoJson()         {}
func (*GeoJson_LineString) isGeoJson_GeoJson()         {}
func (*GeoJson_MultiLineString) isGeoJson_GeoJson()    {}
func (*GeoJson_Polygon) isGeoJson_GeoJson()            {}
func (*GeoJson_MultiPolygon) isGeoJson_GeoJson()       {}
func (*GeoJson_GeometryCollection) isGeoJson_GeoJson() {}
func (*GeoJson_Feature) isGeoJson_GeoJson()            {}
func (*GeoJson_FeatureCollection) isGeoJson_GeoJson()  {}

func (m *GeoJson) GetGeoJson() isGeoJson_GeoJson {
	if m != nil {
		return m.GeoJson
	}
	return nil
}

func (m *GeoJson) GetPoint() *Point {
	if x, ok := m.GetGeoJson().(*GeoJson_Point); ok {
		return x.Point
	}
	return nil
}

func (m *GeoJson) GetMultiPoint() *MultiPoint {
	if x, ok := m.GetGeoJson().(*GeoJson_MultiPoint); ok {
		return x.MultiPoint
	}
	return nil
}

func (m *GeoJson) GetLineString() *LineString {
	if x, ok := m.GetGeoJson().(*GeoJson_LineString); ok {
		return x.LineString
	}
	return nil
}

func (m *GeoJson) GetMultiLineString() *MultiLineString {
	if x, ok := m.GetGeoJson().(*GeoJson_MultiLineString); ok {
		return x.MultiLineString
	}
	return nil
}

func (m *GeoJson) GetPolygon() *Polygon {
	if x, ok := m.GetGeoJson().(*GeoJson_Polygon); ok {
		return x.Polygon
	}
	return nil
}

func (m *GeoJson) GetMultiPolygon() *MultiPolygon {
	if x, ok := m.GetGeoJson().(*GeoJson_MultiPolygon); ok {
		return x.MultiPolygon
	}
	return nil
}

func (m *GeoJson) GetGeometryCollection() *GeometryCollection {
	if x, ok := m.GetGeoJson().(*GeoJson_GeometryCollection); ok {
		return x.GeometryCollection
	}
	return nil
}

func (m *GeoJson) GetFeature() *Feature {
	if x, ok := m.GetGeoJson().(*GeoJson_Feature); ok {
		return x.Feature
	}
	return nil
}

func (m *GeoJson) GetFeatureCollection() *FeatureCollection {
	if x, ok := m.GetGeoJson().(*GeoJson_FeatureCollection); ok {
		return x.FeatureCollection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GeoJson) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GeoJson_Point)(nil),
		(*GeoJson_MultiPoint)(nil),
		(*GeoJson_LineString)(nil),
		(*GeoJson_MultiLineString)(nil),
		(*GeoJson_Polygon)(nil),
		(*GeoJson_MultiPolygon)(nil),
		(*GeoJson_GeometryCollection)(nil),
		(*GeoJson_Feature)(nil),
		(*GeoJson_FeatureCollection)(nil),
	}
}

func init() {
	proto.RegisterType((*GeoJson)(nil), "mojo.geom.GeoJson")
}

func init() { proto.RegisterFile("mojo/geom/geo_json.proto", fileDescriptor_d54cad024c4d1f44) }

var fileDescriptor_d54cad024c4d1f44 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0x57, 0x60, 0x2d, 0xb8, 0x43, 0xa3, 0xde, 0xba, 0x9a, 0x74, 0xc5, 0x63, 0x27, 0x0e,
	0x90, 0x48, 0x70, 0x44, 0x5c, 0x82, 0x60, 0x08, 0x81, 0x54, 0x8d, 0xdb, 0x24, 0x14, 0x6d, 0x95,
	0x67, 0x5c, 0x62, 0x3b, 0x4a, 0xdd, 0x43, 0xdf, 0x84, 0xf7, 0xe0, 0x7d, 0x72, 0xe1, 0x96, 0xa7,
	0x40, 0x76, 0xdc, 0xc4, 0x8e, 0x2f, 0x91, 0xf2, 0x7d, 0x9f, 0x7f, 0x7f, 0xeb, 0x6b, 0xff, 0x01,
	0x88, 0xcb, 0xb5, 0x4c, 0x28, 0x91, 0x5c, 0x3f, 0xb2, 0xf5, 0x46, 0x8a, 0xb8, 0x28, 0xa5, 0x92,
	0xf0, 0x89, 0x76, 0x62, 0xed, 0x44, 0xb3, 0x2e, 0x74, 0x4f, 0x6e, 0xd5, 0xb6, 0x24, 0x4d, 0x26,
	0xba, 0x0c, 0x8c, 0x6c, 0x25, 0xf3, 0x9c, 0xac, 0x14, 0xdb, 0x73, 0xa2, 0x53, 0x6f, 0x02, 0xb7,
	0xea, 0xbc, 0x53, 0x73, 0x26, 0x48, 0xb6, 0x51, 0x25, 0x13, 0xd4, 0x9a, 0x2f, 0x3b, 0x93, 0x6f,
	0x73, 0xc5, 0xb2, 0x30, 0x32, 0xef, 0x47, 0x0a, 0xc9, 0x84, 0xb2, 0xe6, 0x22, 0x34, 0xf3, 0x1d,
	0x6d, 0x6f, 0x34, 0xed, 0x6c, 0xf7, 0xd4, 0xcc, 0x95, 0x9d, 0xfc, 0xe5, 0xdf, 0x21, 0x18, 0x5d,
	0x11, 0xf9, 0x75, 0x23, 0x05, 0xfc, 0x00, 0x0e, 0xcd, 0x19, 0x34, 0xb8, 0x18, 0xbc, 0x1a, 0xbf,
	0x7d, 0x16, 0xb7, 0x2d, 0xc5, 0x4b, 0xad, 0xa7, 0x27, 0x75, 0x85, 0x8f, 0x4d, 0xe4, 0xb5, 0xe4,
	0x4c, 0x11, 0x5e, 0xa8, 0xdd, 0x97, 0x83, 0xeb, 0xe6, 0x14, 0xbc, 0x06, 0x63, 0xe7, 0xba, 0xe8,
	0x81, 0x81, 0x4c, 0x1d, 0xc8, 0x77, 0xed, 0x36, 0x24, 0x54, 0x57, 0xf8, 0x94, 0xb7, 0xef, 0x1e,
	0x0e, 0x74, 0xba, 0x66, 0x3a, 0xfd, 0xa0, 0x87, 0x01, 0xf3, 0x1b, 0x13, 0xe4, 0x87, 0x31, 0x1b,
	0x66, 0xde, 0xbe, 0xfb, 0xcc, 0x4e, 0x87, 0x14, 0x4c, 0x82, 0xe6, 0xd1, 0x23, 0x43, 0x8e, 0xfa,
	0xb7, 0x75, 0xf0, 0x8b, 0xba, 0xc2, 0xcf, 0xb9, 0x2f, 0x7a, 0x33, 0x8e, 0x7b, 0x26, 0xfc, 0x04,
	0x46, 0xb6, 0x6c, 0x74, 0x68, 0xf0, 0xd0, 0x6b, 0xd4, 0x38, 0xe9, 0xb4, 0xae, 0xf0, 0xc4, 0xc6,
	0x3c, 0xdc, 0xfe, 0x2c, 0xbc, 0x01, 0x4f, 0xbd, 0x5f, 0x1a, 0x0d, 0x0d, 0x6c, 0x16, 0x36, 0xdb,
	0x10, 0xa3, 0xba, 0xc2, 0x67, 0xdc, 0x51, 0x3c, 0xec, 0x91, 0xeb, 0xc0, 0x12, 0x9c, 0x68, 0x00,
	0x51, 0xe5, 0xce, 0xf9, 0x77, 0xa3, 0x91, 0x99, 0xb0, 0x70, 0x26, 0x5c, 0xd9, 0xd4, 0xc7, 0x36,
	0x94, 0x5e, 0xd4, 0x15, 0x3e, 0xa7, 0x81, 0xee, 0x4d, 0x83, 0xa1, 0xaf, 0x6b, 0xb1, 0x0b, 0x85,
	0x40, 0x50, 0xcb, 0xe7, 0xc6, 0x69, 0x6a, 0xb1, 0x31, 0xbf, 0x16, 0x2b, 0x42, 0x01, 0x60, 0xb8,
	0x97, 0x68, 0x6c, 0x88, 0xe7, 0x21, 0xd1, 0xb9, 0x38, 0xae, 0x2b, 0x3c, 0xbf, 0xef, 0xcb, 0xde,
	0x94, 0x49, 0x60, 0xa7, 0x00, 0x3c, 0xde, 0x7f, 0x45, 0xd2, 0x9f, 0x7f, 0xfe, 0xbd, 0x38, 0x00,
	0x67, 0xb2, 0xa4, 0x66, 0x50, 0x7e, 0x2b, 0x68, 0x37, 0x31, 0x3d, 0xb2, 0x0b, 0xb5, 0xd4, 0x1b,
	0xb6, 0x1c, 0xdc, 0x24, 0x94, 0xa9, 0x5f, 0xdb, 0xbb, 0x78, 0xa5, 0x77, 0x56, 0xae, 0xe5, 0x1b,
	0x9d, 0xb7, 0x5f, 0x0d, 0x99, 0x14, 0xbf, 0x69, 0xd2, 0x6e, 0xe7, 0x7b, 0xfd, 0xb8, 0x1b, 0x9a,
	0xdd, 0x7c, 0xf7, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xb7, 0x81, 0x0e, 0xc1, 0x04, 0x00, 0x00,
}
